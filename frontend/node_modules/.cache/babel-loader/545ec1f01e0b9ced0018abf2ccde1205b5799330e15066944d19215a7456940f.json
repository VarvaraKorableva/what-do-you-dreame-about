{"ast":null,"code":"export const BASE_URL = '//localhost:3000';\nfunction checkResponse(res) {\n  if (res.ok) {\n    return res.json();\n  }\n  return Promise.reject(`Ошибка: ${res.status}`);\n}\nexport const register = _ref => {\n  let {\n    password,\n    email,\n    name\n  } = _ref;\n  return fetch(`${BASE_URL}/signup`, {\n    credentials: 'include',\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      password: password,\n      email: email,\n      name: name\n    })\n  }).then(res => {\n    console.log(res);\n    return checkResponse(res);\n  });\n};\nexport const authorize = (password, email) => {\n  return fetch(`${BASE_URL}/signin`, {\n    credentials: 'include',\n    method: \"POST\",\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  }).then(checkResponse);\n};\nexport const getContent = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    credentials: 'include',\n    method: \"GET\",\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    }\n  }).then(checkResponse);\n};\n\n/*\nexport default class Api {\n    constructor({url, headers}) {\n        this._url = url;\n        this._headers = headers;\n    }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  getUserInfo() {\n    return fetch(`${this._url}/users/me`, {\n      credentials: 'include',\n      method:'GET',\n      headers: this._headers\n    })\n    .then(this._checkResponse);\n  }\n\n  setUserInfo(userData) {\n    return fetch(`${this._url}/users/me`, {\n      credentials: 'include',\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: userData.name,\n        about: userData.about\n      })\n    })\n    .then(this._checkResponse);\n  }\n\n  getInitialCards() {\n    return fetch(`${this._url}/cards`, {\n      credentials: 'include',\n      method:'GET',\n      headers: this._headers\n    })\n    .then(this._checkResponse);\n  }\n\n  addUserCard(data) {\n    return fetch(`${this._url}/cards`, {\n      credentials: 'include',\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    })\n      .then(this._checkResponse);\n  }\n\n  deleteCard(id) {\n    return fetch (`${this._url}/cards/${id}`, {\n      credentials: 'include',\n      method: 'DELETE',\n      headers: this._headers\n    })\n      .then(this._checkResponse);\n  }\n\n  changeLikeStatus(id, isLiked) {\n    return fetch (`${this._url}/cards/${id}/likes`, {\n      credentials: 'include',\n      method: `${isLiked ? 'PUT' : 'DELETE'}`,\n      headers: this._headers\n    })\n        .then(this._checkResponse);\n  }\n\n  updateUserAvatar(data) {\n    return fetch (`${this._url}/users/me/avatar`, {\n      credentials: 'include',\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    })\n      .then(this._checkResponse);\n  }\n}\n\nconst api = new Api({\n  url:'//localhost:3000',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\nexport {api};*/","map":{"version":3,"names":["BASE_URL","checkResponse","res","ok","json","Promise","reject","status","register","password","email","name","fetch","credentials","method","headers","body","JSON","stringify","then","console","log","authorize","getContent","token"],"sources":["/Users/varvarakorableva/what-do-you-dreame-about/frontend/src/Api/Api.js"],"sourcesContent":["export const BASE_URL = '//localhost:3000';\n\n  function checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n      return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\nexport const register = ( {password, email, name} ) => {\n  return fetch(`${BASE_URL}/signup`, {\n    credentials: 'include',\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      password: password,\n      email: email,\n      name: name \n      })\n  }).then((res) => {\n    console.log(res);\n    return checkResponse(res);\n  });\n}; \n\nexport const authorize = ( password, email ) => {\n  return fetch(`${BASE_URL}/signin`, {\n      credentials: 'include',\n      method: \"POST\",\n      headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ password, email })\n  })\n      .then(checkResponse)\n      \n};\n\nexport const getContent = (token) => {\n  return fetch(`${BASE_URL}/users/me`, {\n      credentials: 'include',\n      method: \"GET\",\n      headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${token}`\n      },\n  })\n      .then(checkResponse)\n};\n\n/*\nexport default class Api {\n    constructor({url, headers}) {\n        this._url = url;\n        this._headers = headers;\n    }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  getUserInfo() {\n    return fetch(`${this._url}/users/me`, {\n      credentials: 'include',\n      method:'GET',\n      headers: this._headers\n    })\n    .then(this._checkResponse);\n  }\n\n  setUserInfo(userData) {\n    return fetch(`${this._url}/users/me`, {\n      credentials: 'include',\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: userData.name,\n        about: userData.about\n      })\n    })\n    .then(this._checkResponse);\n  }\n\n  getInitialCards() {\n    return fetch(`${this._url}/cards`, {\n      credentials: 'include',\n      method:'GET',\n      headers: this._headers\n    })\n    .then(this._checkResponse);\n  }\n\n  addUserCard(data) {\n    return fetch(`${this._url}/cards`, {\n      credentials: 'include',\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    })\n      .then(this._checkResponse);\n  }\n\n  deleteCard(id) {\n    return fetch (`${this._url}/cards/${id}`, {\n      credentials: 'include',\n      method: 'DELETE',\n      headers: this._headers\n    })\n      .then(this._checkResponse);\n  }\n\n  changeLikeStatus(id, isLiked) {\n    return fetch (`${this._url}/cards/${id}/likes`, {\n      credentials: 'include',\n      method: `${isLiked ? 'PUT' : 'DELETE'}`,\n      headers: this._headers\n    })\n        .then(this._checkResponse);\n  }\n\n  updateUserAvatar(data) {\n    return fetch (`${this._url}/users/me/avatar`, {\n      credentials: 'include',\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    })\n      .then(this._checkResponse);\n  }\n}\n\nconst api = new Api({\n  url:'//localhost:3000',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\nexport {api};*/"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,kBAAkB;AAExC,SAASC,aAAa,CAACC,GAAG,EAAE;EAC1B,IAAIA,GAAG,CAACC,EAAE,EAAE;IACV,OAAOD,GAAG,CAACE,IAAI,EAAE;EACnB;EACE,OAAOC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC;AAClD;AAEF,OAAO,MAAMC,QAAQ,GAAG,QAA+B;EAAA,IAA7B;IAACC,QAAQ;IAAEC,KAAK;IAAEC;EAAI,CAAC;EAC/C,OAAOC,KAAK,CAAE,GAAEZ,QAAS,SAAQ,EAAE;IACjCa,WAAW,EAAE,SAAS;IACtBC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBT,QAAQ,EAAEA,QAAQ;MAClBC,KAAK,EAAEA,KAAK;MACZC,IAAI,EAAEA;IACN,CAAC;EACL,CAAC,CAAC,CAACQ,IAAI,CAAEjB,GAAG,IAAK;IACfkB,OAAO,CAACC,GAAG,CAACnB,GAAG,CAAC;IAChB,OAAOD,aAAa,CAACC,GAAG,CAAC;EAC3B,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMoB,SAAS,GAAG,CAAEb,QAAQ,EAAEC,KAAK,KAAM;EAC9C,OAAOE,KAAK,CAAE,GAAEZ,QAAS,SAAQ,EAAE;IAC/Ba,WAAW,EAAE,SAAS;IACtBC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAET,QAAQ;MAAEC;IAAM,CAAC;EAC5C,CAAC,CAAC,CACGS,IAAI,CAAClB,aAAa,CAAC;AAE1B,CAAC;AAED,OAAO,MAAMsB,UAAU,GAAIC,KAAK,IAAK;EACnC,OAAOZ,KAAK,CAAE,GAAEZ,QAAS,WAAU,EAAE;IACjCa,WAAW,EAAE,SAAS;IACtBC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAG,UAASS,KAAM;IACrC;EACJ,CAAC,CAAC,CACGL,IAAI,CAAClB,aAAa},"metadata":{},"sourceType":"module","externalDependencies":[]}